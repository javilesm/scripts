#!/bin/bash
# mkparts.sh
# Variables
CURRENT_DIR="$( cd "$( dirname "${0}" )" && pwd )" # Obtener el directorio actual
CONFIRM_SCRIPT="$CURRENT_DIR/confirm"
# Obtener la unidad a particionar y el número de particiones del usuario
function get_dev() {
  echo "Unidades de disco disponibles:"
  lsblk -o NAME,SIZE,TYPE,MOUNTPOINT | grep -e '^NAME' -e 'disk' | awk '{print $1, $2}'
  echo "--------------------------------------------------"

  read -p "Ingrese el nombre de la unidad a particionar (ejemplo: sda, xvdf): " unidad
  # Validar la unidad ingresada
  if ! [ -b "/dev/$unidad" ]; then
    echo "La unidad especificada no existe."
    exit 1
  fi
  read -p "Ingrese el número de particiones a crear: " num_particiones
  # Validar el número de particiones ingresado
  if ! [[ "$num_particiones" =~ ^[0-9]+$ ]] || [ "$num_particiones" -lt 1 ]; then
    echo "El número de particiones ingresado no es válido."
    exit 1
  fi

}

function confirm() {
    # Mostrar la información ingresada y solicitar confirmación al usuario
  echo "Se crearán $num_particiones particiones en la unidad: '/dev/$unidad'."
  source "$CONFIRM_SCRIPT" # Incluye el archivo confirmacion.sh
  # Pide confirmación al usuario
  if confirm " ¿Está seguro de que desea ejecutar la acción?"; then
    echo "El usuario confirmó la ejecución."
    # Coloca aquí las acciones a realizar si el usuario confirma
    split_dev
    make_partitions
    format_parts
    get_mounting
    mount_partition
    edit_fstab
  else  
    echo "El usuario canceló la ejecución."
    # Coloca aquí las acciones a realizar si el usuario cancela
    exit 1
  fi
}

# Calcular el tamaño de cada partición en base al tamaño de la unidad y el número de particiones
function split_dev() {
  echo "Calculando el tamaño de cada partición en base al tamaño de la unidad y el número de particiones..."
  tamanio_unidad=$(sudo blockdev --getsize64 "/dev/$unidad")
  tamanio_particion=$((tamanio_unidad / num_particiones / 1024 / 1024)) # en MB
  echo "El tamaño de la unidad es: $tamanio_unidad bytes"
  echo "El tamaño de cada partición es: $tamanio_particion MB"

  # Validar que el tamaño de la partición sea al menos 1MB
  if [ "$tamanio_particion" -lt 1 ]; then
    echo "El tamaño de la partición calculado es menor a 1MB. Ajusta el número de particiones o la unidad a particionar."
    exit 1
  fi
}

# Crear las particiones
function make_partitions() {
  echo "Creando las particiones..."
  sudo parted "/dev/$unidad" mklabel gpt
  start_sector=2048
  end_sector=$((tamanio_particion * 2048 - 1))

  for i in $(seq $num_particiones); do
    sudo parted "/dev/$unidad" mkpart primary ext4 ${start_sector}s ${end_sector}s
    start_sector=$((end_sector + 1))
    end_sector=$((end_sector + tamanio_particion * 2048))
  done
}

# Formatear las particiones con el formato especificado por el usuario
function format_parts() {
  echo "Seleccione el formato de las particiones:"
  echo "1. ext2"
  echo "2. ext3"
  echo "3. ext4 (predeterminado)"
  read -p "Ingrese el número de formato deseado [1-3]: " opcion

  case $opcion in
    1) formato="ext2";;
    2) formato="ext3";;
    *) formato="ext4";;
  esac

  for i in $(seq $num_particiones); do
    sudo mkfs.$formato "/dev/${unidad}${i}"
  done
}
# Obtener el punto de montaje
function get_mounting() {
  echo "A continuación, ingrese el punto de montaje deseado para la partición '/dev/$unidad'"
  sleep 1
  read -p "Ingrese el punto de montaje deseado para la partición '/dev/$unidad': " mounting_path

  # Validar si se ha proporcionado un punto de montaje válido
  if [[ -z "$mounting_path" ]]; then
    echo "El punto de montaje no puede estar vacío. Por favor, ingrese un punto de montaje válido."
    get_mounting  # Volver a solicitar al usuario que ingrese un punto de montaje válido
    return
  fi

  echo "El punto de montaje especificado es: $mounting_path"

}

# Montar la particion en el punto de montaje
function mount_partition() {
  for i in $(seq $num_particiones); do
    partition_path="/dev/${unidad}${i}"
    mount_path="$mounting_path/$unidad$i"

    # Verificar si el punto de montaje ya está siendo utilizado
    if mountpoint -q "$mount_path"; then
      echo "El punto de montaje '$mount_path' ya está en uso."
      read -p "¿Desea seleccionar un nuevo punto de montaje? (y/n): " change_mount
      if [[ "$change_mount" != "y" && "$change_mount" != "Y" ]]; then
        continue  # Pasar a la siguiente partición sin montarla
      else
        get_mounting  # Volver a solicitar al usuario que ingrese un nuevo punto de montaje
      fi
    fi

    # Montar la partición
    if sudo mount "$partition_path" "$mount_path"; then
      echo "Partición '$partition_path' montada en '$mount_path'."
    else
      echo "Error al montar la partición '$partition_path' en '$mount_path'."
      echo "Asegúrese de que la partición exista y el punto de montaje esté disponible."
      echo "Revise los permisos y la configuración del sistema."
    fi
  done
}


# Agregar entradas en /etc/fstab para montar las particiones al reiniciar el sistema
function edit_fstab() {
  for i in $(seq $num_particiones); do
    echo "$partition_path $mount_path $formato defaults 0 0" | sudo tee -a /etc/fstab
  done
}

function mkparts() {
  get_dev
  confirm
}
mkparts
