#!/bin/bash
# ec2snap.sh
# Variables
SOURCE_DIR="/*" # Directorio local a respaldar
BACKUP_DIR="/vault/xvda1" # Directorio temporal para archivo comprimido
BACKUP_FILE="snapshot_$(date +%Y%m%d_%H%M%S).tar.gz" # Nombre del archivo de respaldo
# Función para comprimir el directorio local en un archivo tar.gz
function compress_dir() {
    echo "Comprimiendo el directorio local en un archivo tar.gz..."
    sudo tar czf "$BACKUP_DIR/$BACKUP_FILE" --one-file-system --exclude='proc' --exclude='tmp' --exclude='var/tmp' --exclude='var/cache' --exclude='var/log' --exclude='data' --exclude='run' --exclude='lost+found' --exclude='mnt' --exclude='vault' -P $SOURCE_DIR
    if [ $? -ne 0 ]; then
        echo "Ha ocurrido un error comprimiendo el directorio local en un archivo tar.gz"
        exit 1
    fi
}
# Función para calcular el tamaño total del archivo creado con rsync
function calculate_size() {
    tamano_total=$(du -sh $BACKUP_DIR/$BACKUP_FILE | awk '{print $1}')  # Obtener el tamaño total en formato legible por humanos
    if [ $? -ne 0 ]; then
        echo "Ha ocurrido un error al calcular el tamaño total del archivo"
        exit 1
    fi
}
# Función para mostrar información de la copia de seguridad
function report() {
    echo "Hora de copia de seguridad: $inicio"
    echo "Tiempo transcurrido: $tiempo_transcurrido segundos."
    echo "El tamaño total de la copia de seguridad es: $tamano_total."
    echo "Copia de seguridad realizada con exito..."
    ls $BACKUP_DIR
}
# Función principal
function ec2snap() {
  # Inicio del programa
  inicio=$(date +%s)  # Tomar la hora de inicio del respaldo
  compress_dir
  calculate_size
  # Calcular el tiempo transcurrido
  fin=$(date +%s)  # Tomar la hora de fin del respaldo
  tiempo_transcurrido=$((fin - inicio))  # Calcular el tiempo transcurrido en segundos
  # Fin
  report
}
# Llamar a la funcion principal
ec2snap
