#!/bin/bash
# ec2snap.sh
# Variables
SOURCE_DIR="/home/ubuntu/scripts" # Directorio local a respaldar
LOG_DIR="/var/log/ec2snap"
LOG_FILE="$LOG_DIR/backup_log_$(date +%Y%m%d).txt" # Nombre del archivo de registro
BACKUP_DIR="/var/ec2snap" # Directorio temporal para archivo comprimido
BACKUP_FILE="snapshot_$(date +%Y%m%d_%H%M%S).tar.gz" # Nombre del archivo de respaldo
# Función para comprobar si la ruta de respaldo está montada y, en caso negativo, montar una unidad disponible
function check_mount() {
    # Comprobar si la ruta de respaldo está montada
    echo "Comprobando si la ruta de respaldo está montada..."
    mount_point=$(df --output=target "$BACKUP_DIR" | tail -n 1)
    if [ "$mount_point" != "$BACKUP_DIR" ]; then
        echo "La ruta de respaldo '$BACKUP_DIR' no está montada."
        
        # Obtener una lista de las unidades disponibles en el sistema
        available_drives=$(lsblk -rpo "NAME,TYPE,MOUNTPOINT" | awk '$2=="disk" && $3=="" {print $1}')

        if [ -z "$available_drives" ]; then
            echo "No se encontraron unidades disponibles en el sistema."
            exit 1
        fi

        echo "Unidades disponibles en el sistema:"
        echo "$available_drives"

        # Montar la primera unidad disponible
        drive_to_mount=$(echo "$available_drives" | head -n 1)

        echo "Montando la unidad '$drive_to_mount' en '$BACKUP_DIR'..."
        sudo mount "/dev/$drive_to_mount" "$BACKUP_DIR"
        
        # Verificar si el montaje fue exitoso
        mount_point=$(df --output=target "$BACKUP_DIR" | tail -n 1)
        if [ "$mount_point" != "$BACKUP_DIR" ]; then
            echo "Error al montar la unidad '$drive_to_mount' en '$BACKUP_DIR'."
            exit 1
        else
            echo "La unidad '$drive_to_mount' se ha montado correctamente en '$BACKUP_DIR'."
        fi
    else
        echo "La ruta de respaldo '$BACKUP_DIR' está montada."
    fi
}
# Función para verificar la existencia del directorio temporal para archivo comprimido
function check_log_dir() {
    # verificar la existencia del directorio temporal
    echo "Verificando la existencia del directorio temporal..."
    if [ -d "$LOG_DIR" ]; then
        echo "El directorio de respaldo '$LOG_DIR' existe."
    else
        echo "ERROR: El directorio de respaldo '$LOG_DIR' no existe."
        echo "Creando el directorio de respaldo '$LOG_DIR'."
        sudo mkdir -p "$LOG_DIR" 
        sudo chmod 777 "$LOG_DIR" 
    fi
}
function check_backup_dir() {
    # verificar la existencia del directorio temporal
    echo "Verificando la existencia del directorio temporal..."
    if [ -d "$BACKUP_DIR" ]; then
        echo "El directorio de respaldo '$BACKUP_DIR' existe."
    else
        echo "ERROR: El directorio de respaldo '$BACKUP_DIR' no existe."
        echo "Creando el directorio de respaldo '$BACKUP_DIR'."
        sudo mkdir -p "$BACKUP_DIR" 
    fi
}
# Función para comprimir el directorio local en un archivo tar.gz
function compress_dir() {
    # comprimir el directorio local en un archivo tar.gz
    echo "Comprimiendo el directorio local en un archivo tar.gz..."
    sudo tar czf "$BACKUP_DIR/$BACKUP_FILE" --one-file-system --exclude='proc' --exclude='tmp' --exclude='var/tmp' --exclude='var/cache' --exclude='var/log' --exclude='data' --exclude='run' --exclude='lost+found' --exclude='mnt' --exclude='vault' -P $SOURCE_DIR
    if [ $? -ne 0 ]; then
        echo "Ha ocurrido un error comprimiendo el directorio local en un archivo tar.gz"
        exit 1
    fi
}
# Función para calcular el tamaño total del archivo creado
function calculate_size() {
    # calcular el tamaño total del archivo creado
    echo "Calculando el tamaño total del archivo creado..."
    tamano_total=$(du -sh $BACKUP_DIR/$BACKUP_FILE | awk '{print $1}')  # Obtener el tamaño total en formato legible por humanos
    if [ $? -ne 0 ]; then
        echo "Ha ocurrido un error al calcular el tamaño total del archivo"
        exit 1
    fi
}
# Función para mostrar información de la copia de seguridad
function report() {
    # mostrar información de la copia de seguridad
    echo "Mostrando información de la copia de seguridad..."
    echo "Hora de copia de seguridad: $inicio"
    echo "Tiempo transcurrido: $tiempo_transcurrido segundos."
    echo "El tamaño total de la copia de seguridad es: $tamano_total."
    echo "Copia de seguridad realizada con exito..."
    echo "Mostrando información de la copia de seguridad..." | tee -a "$LOG_FILE"
    echo "Hora de copia de seguridad: $inicio" | tee -a "$LOG_FILE"
    echo "Tiempo transcurrido: $tiempo_transcurrido segundos." | tee -a "$LOG_FILE"
    echo "El tamaño total de la copia de seguridad es: $tamano_total." | tee -a "$LOG_FILE"
    echo "Copia de seguridad realizada con éxito..." | tee -a "$LOG_FILE"
    ls "$BACKUP_DIR" | tee -a "$LOG_FILE"
}
# Función principal
function ec2snap() {
    check_mount
    check_log_dir
    check_backup_dir
      # Inicio del programa
      inicio=$(date +%s)  # Tomar la hora de inicio del respaldo
      compress_dir
      calculate_size
      # Calcular el tiempo transcurrido
      fin=$(date +%s)  # Tomar la hora de fin del respaldo
      tiempo_transcurrido=$((fin - inicio))  # Calcular el tiempo transcurrido en segundos
      # Fin
      echo "Registrando información de la copia de seguridad en $LOG_FILE..."
      report
}
# Llamar a la funcion principal
ec2snap
